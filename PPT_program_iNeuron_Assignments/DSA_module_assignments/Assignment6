Question 1

A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:

- s[i] == 'I' if perm[i] < perm[i + 1], and
- s[i] == 'D' if perm[i] > perm[i + 1].

Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return **any of them**.

**Example 1:**

**Input:** s = "IDID"

**Output:**

[0,4,1,3,2]

SOLUTION:

public int[] diStringMatch(String s) 
    {
        int[] nums = new int[s.length() +1];
        
        int smallest =0;char ch;
        int largest = s.length();
        
        for(int i=0; i<s.length(); i++)
        {
            ch=s.charAt(i);
            
            if(ch=='I')
                nums[i] = smallest++;
            
            else
                nums[i] = largest--;            
        }
        return nums;
    }

QUESTION 2

You are given an m x n integer matrix matrix with the following two properties:

- Each row is sorted in non-decreasing order.
- The first integer of each row is greater than the last integer of the previous row.

Given an integer target, return true *if* target *is in* matrix *or* false *otherwise*.

You must write a solution in O(log(m * n)) time complexity.

**Example 1:**

**Input:** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3

**Output:** true

SOLUTION:

public boolean searchMatrix(int[][] matrix, int target)
    {
        int m = matrix.length;
        int n = matrix[0].length;
        
        int start =0;
        int end = m*n -1;
        
        while(start <= end)
        {
            int mid = start + (end - start)/2;
            
            int row = mid/n;
            int column = mid %n;
            
            if(matrix[row][column] == target)
                return true;
            
            if(matrix[row][column] < target)
                start = mid+1;
            
            else
                end = mid -1;
        }
        return false;
    }

Question 3

Given an array of integers arr, return *true if and only if it is a valid mountain array*.

Recall that arr is a mountain array if and only if:

- arr.length >= 3
- There exists some i with 0 < i < arr.length - 1 such that:
    - arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
    - arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

**Example 1:**

**Input:** arr = [2,1]

**Output:**

false

SOLUTION:

public boolean validMountainArray(int[] A) 
     {
        int n = A.length, i = 0, j = n - 1;
        while (i + 1 < n && A[i] < A[i + 1])
         i++;
        while (j > 0 && A[j - 1] > A[j])
         j--;
        return i > 0 && i == j && j < n - 1;
     }
}

Question 4

Given a binary array nums, return *the maximum length of a contiguous subarray with an equal number of* 0 *and* 1.

**Example 1:**

**Input:** nums = [0,1]

**Output:** 2

**Explanation:**

[0, 1] is the longest contiguous subarray with an equal number of 0 and 1.

SOLUTION:

 public int findMaxLength(int[] nums) 
    {
        int zero =0,one =0;
        int max =0, temp =0;
        
        for(int i=0; i<nums.length;i++)
        {
            if(nums[i] == 0)
                zero++;
            
            if(nums[i] == 1)
                one++;
            
            if(zero == one)
            {
                temp = zero+one;
                max = Math.max(max , temp);
            }
            
        }
        return max;
    }

Question 5

The **product sum** of two equal-length arrays a and b is equal to the sum of a[i] * b[i] for all 0 <= i < a.length (**0-indexed**).

- For example, if a = [1,2,3,4] and b = [5,2,3,1], the **product sum** would be 1*5 + 2*2 + 3*3 + 4*1 = 22.

Given two arrays nums1 and nums2 of length n, return *the **minimum product sum** if you are allowed to **rearrange** the **order** of the elements in* nums1.

**Example 1:**

**Input:** nums1 = [5,3,4,2], nums2 = [4,2,2,5]

**Output:** 40

**Explanation:**

We can rearrange nums1 to become [3,5,4,2]. The product sum of [3,5,4,2] and [4,2,2,5] is 3*4 + 5*2 + 4*2 + 2*5 = 40.

SOLUTION:

 public int minProductSum(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int n = nums1.length, res = 0;
        for (int i = 0; i < n; ++i) {
            res += nums1[i] * nums2[n - i - 1];
        }
        return res;
    }

Question 6

An integer array original is transformed into a **doubled** array changed by appending **twice the value** of every element in original, and then randomly **shuffling** the resulting array.

Given an array changed, return original *if* changed *is a **doubled** array. If* changed *is not a **doubled** array, return an empty array. The elements in* original *may be returned in **any** order*.

**Example 1:**

**Input:** changed = [1,3,4,2,6,8]

**Output:** [1,3,4]

**Explanation:** One possible original array could be [1,3,4]:

- Twice the value of 1 is 1 * 2 = 2.
- Twice the value of 3 is 3 * 2 = 6.
- Twice the value of 4 is 4 * 2 = 8.

Other original arrays could be [4,3,1] or [3,1,4].

SOLUTION:

public int[] findOriginalArray(int[] changed) 
    {
        if(changed.length % 2 != 0)
            return new int[0];
        
        int mid = changed.length/2;
        int[] result = new int[mid];
        int[] freq = new int[100001]; 
        
        for(Integer i: changed)
            freq[i]++;
        
        int index =0;
        
        for(int i=0; i<freq.length;i++)
        {
            while(freq[i] > 0 && i*2 < 100001 && freq[i*2] > 0)
            {
                freq[i]--;
                freq[i*2]--;
                result[index++] = i;
            }
        }
        
        for(int i=0; i<freq.length;i++)
        {
            if(freq[i] != 0)
                return new int[0];
        }
        
        return result;
    }

Question 7

Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

**Example 1:**

**Input:** n = 3

**Output:** [[1,2,3],[8,9,4],[7,6,5]]

SOLUTION:

public int[][] generateMatrix(int n) 
    {
        int[][] matrix = new int[n][n];
        int num = 1;
        int row = 0;
        int col = 0;
        int direction = 0;
        int[] dr = {0, 1, 0, -1};
        int[] dc = {1, 0, -1, 0};
        while (num <= n * n) {
            matrix[row][col] = num;
            num++;
            int nextRow = row + dr[direction];
            int nextCol = col + dc[direction];
            if (nextRow < 0 || nextRow >= n || nextCol < 0 || nextCol >= n || matrix[nextRow][nextCol] != 0) {
                direction = (direction + 1) % 4;
            }
            row += dr[direction];
            col += dc[direction];
        }
        return matrix;
    }

Question 8

Given two [sparse matrices]mat1 of size m x k and mat2 of size k x n, return the result of mat1 x mat2. You may assume that multiplication is always possible.

**Example 1:**

**Input:** mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]]

**Output:**

[[7,0,0],[-7,0,3]]

SOLUTION:

public class SparseMatrixMultiplication {
    public static int[][] multiplySparseMatrices(int[][] mat1, int[][] mat2) {
        int m = mat1.length;
        int k = mat1[0].length;
        int n = mat2[0].length;

        // Create an empty result matrix
        int[][] res = new int[m][n];

        // Perform matrix multiplication
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < k; j++) {
                if (mat1[i][j] != 0) {
                    for (int l = 0; l < n; l++) {
                        if (mat2[j][l] != 0) {
                            res[i][l] += mat1[i][j] * mat2[j][l];
                        }
                    }
                }
            }
        }
