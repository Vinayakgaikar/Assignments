Question 1

Given a binary tree, your task is to find subtree with maximum sum in tree.

Examples:

Input1 :       

       1

     /   \

   2      3

  / \    / \

4   5  6   7

Output1 : 28

As all the tree elements are positive, the largest subtree sum is equal to sum of all tree elements.

Input2 :

       1

     /    \

  -2      3

  / \    /  \

4   5  -6   2

Output2 : 7

Subtree with largest sum is :

 -2

 / \

4   5

Also, entire tree sum is also 7.

SOLUTION:

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
        this.left = null;
        this.right = null;
    }
}

class Result {
    int maxSum;
    TreeNode maxSumSubtree;

    Result(int maxSum, TreeNode maxSumSubtree) {
        this.maxSum = maxSum;
        this.maxSumSubtree = maxSumSubtree;
    }
}

public class MaxSumSubtree {
    private int maxSum;

    public TreeNode findMaxSumSubtree(TreeNode root) {
        if (root == null) {
            return null;
        }

        Result result = findMaxSumSubtreeHelper(root);
        return result.maxSumSubtree;
    }

    private Result findMaxSumSubtreeHelper(TreeNode node) {
        if (node == null) {
            return new Result(0, null);
        }

        Result leftResult = findMaxSumSubtreeHelper(node.left);
        Result rightResult = findMaxSumSubtreeHelper(node.right);

        int currentSum = node.val + leftResult.maxSum + rightResult.maxSum;

        if (currentSum > maxSum) {
            maxSum = currentSum;
        }

        TreeNode maxSumSubtree = node;
        if (leftResult.maxSum > maxSum) {
            maxSum = leftResult.maxSum;
            maxSumSubtree = leftResult.maxSumSubtree;
        }
        if (rightResult.maxSum > maxSum) {
            maxSum = rightResult.maxSum;
            maxSumSubtree = rightResult.maxSumSubtree;
        }

        return new Result(currentSum, maxSumSubtree);
    }

Question 2

Construct the BST (Binary Search Tree) from its given level order traversal.

Example:

Input: arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}

Output: BST:

            7

         /    \

       4     12

     /  \     /

    3   6  8

   /    /     \

 1    5      10

SOLUTION:

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
        this.left = null;
        this.right = null;
    }
}

public class ConstructBSTFromLevelOrder {
    public TreeNode constructBST(int[] levelOrder) {
        if (levelOrder == null || levelOrder.length == 0) {
            return null;
        }

        TreeNode root = new TreeNode(levelOrder[0]);
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        int i = 1;
        while (!queue.isEmpty() && i < levelOrder.length) {
            TreeNode current = queue.poll();

            int leftValue = levelOrder[i];
            if (leftValue != -1) {
                current.left = new TreeNode(leftValue);
                queue.add(current.left);
            }
            i++;

            if (i < levelOrder.length) {
                int rightValue = levelOrder[i];
                if (rightValue != -1) {
                    current.right = new TreeNode(rightValue);
                    queue.add(current.right);
                }
                i++;
            }
        }

        return root;
    }

Question 3

Given an array of size n. The problem is to check whether the given array can represent the level order traversal of a Binary Search Tree or not.

Examples:

Input1 : arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}

Output1 : Yes

For the given arr[], the Binary Search Tree is:

            7

         /    \

       4     12

     /  \     /

    3   6  8

   /    /     \

 1    5      10

Input2 : arr[] = {11, 6, 13, 5, 12, 10}

Output2 : No

The given arr[] does not represent the level order traversal of a BST.

SOLUTION:

public class LevelOrderBSTCheck {
    public static boolean isLevelOrderBST(int[] levelOrder) {
        if (levelOrder == null || levelOrder.length == 0) {
            return true;
        }

        int n = levelOrder.length;
        Queue<Integer> queue = new LinkedList<>();
        queue.add(levelOrder[0]);

        int i = 1;
        while (i < n && !queue.isEmpty()) {
            int currentNode = queue.poll();

            if (i < n && levelOrder[i] < currentNode) {
                return false;
            }

            if (i < n && levelOrder[i] > currentNode) {
                queue.add(levelOrder[i]);
            }

            i++;
        }

        return true;
    }
