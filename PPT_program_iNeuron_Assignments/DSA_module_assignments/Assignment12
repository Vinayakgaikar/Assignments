Question 1

Given a singly linked list, delete **middle** of the linked list. For example, if given linked list is 1->2->**3**->4->5 then linked list should be modified to 1->2->4->5.If there are **even** nodes, then there would be **two middle** nodes, we need to delete the second middle element. For example, if given linked list is 1->2->3->4->5->6 then it should be modified to 1->2->3->5->6.If the input linked list is NULL or has 1 node, then it should return NULL

**Example 1:**

```
Input:
LinkedList: 1->2->3->4->5
Output:1 2 4 5

```

SOLUTION:

public ListNode deleteMiddle(ListNode head)
    {
        if(head.next == null)
            return null;
        
        ListNode slow = head;
        ListNode fast = head.next.next;
        
        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        slow.next = slow.next.next;
        
        return head;        
    }

Question 2

Given a linked list of **N** nodes. The task is to check if the linked list has a loop. Linked list can contain self loop.

**Example 1:**

```
Input:
N = 3
value[] = {1,3,4}
x(position at which tail is connected) = 2
Output:True
Explanation:In above test case N = 3.
The linked list with nodes N = 3 is
given. Then value of x=2 is given which
means last node is connected with xth
node of linked list. Therefore, there
exists a loop.
```

SOLUTION:

public boolean hasCycle(ListNode head) 
    {
        if(head == null || head.next == null)
            return false;
        
        ListNode fast = head;
        ListNode slow = head;
        
        while(fast.next != null && fast.next.next != null)
        {
            fast = fast.next.next;
            slow = slow.next;
            
            if(fast == slow)
                return true;
        }
        
        return false;
    }

Question 3

Given a linked list consisting of L nodes and given a number N. The task is to find the Nth node from the end of the linked list.

**Example 1:**

```
Input:
N = 2
LinkedList: 1->2->3->4->5->6->7->8->9
Output:8
Explanation:In the first example, there
are 9 nodes in linked list and we need
to find 2nd node from end. 2nd node
from end is 8.

```
SOLUTION:

public Node printNthFromLast(int N)
    {
        int len = 0;
        Node temp = head;
 
        // 1) count the number of nodes in Linked List
        while (temp != null) {
            temp = temp.next;
            len++;
        }
 
        // check if value of N is not more than length of
        // the linked list
        if (len < N)
            return;
 
        temp = head;
 
        // 2) get the (len-N+1)th node from the beginning
        for (int i = 1; i < len - N + 1; i++)
            temp = temp.next;
 
        return temp.data;
    }


Question 4

Given a singly linked list of characters, write a function that returns true if the given list is a palindrome, else false.

**Examples:**

> Input: R->A->D->A->R->NULL
> 
> 
> **Output:** Yes
> 
> **Input:** C->O->D->E->NULL
> 
> **Output:** No

SOLUTION:

public boolean isPalindrome(ListNode head) 
    {
        if(head == null || head.next == null)
            return true;
        
        ListNode slow = head , fast = head;
        
        while(fast.next != null && fast.next.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        slow.next = reverse(slow.next);
        slow = slow.next;
        ListNode dummy = head;
        
        while(slow != null)
        {
            if(dummy.val != slow.val)
                return false;
            
            dummy = dummy.next;
            slow = slow.next;
        }
        return true;
        
    }
    
    private ListNode reverse(ListNode head)
    {
        ListNode pre = null , nex = null;
        
        while(head != null)
        {
            nex = head.next;
            head.next = pre;
            pre = head;
            head = nex;
        }
        return pre;
    }

Question 5

Given a linked list of **N** nodes such that it may contain a loop.

A loop here means that the last node of the link list is connected to the node at position X(1-based index). If the link list does not have any loop, X=0.

Remove the loop from the linked list, if it is present, i.e. unlink the last node which is forming the loop.

**Example 1:**

```
Input:
N = 3
value[] = {1,3,4}
X = 2
Output:1
Explanation:The link list looks like
1 -> 3 -> 4
     ^    |
     |____|
A loop is present. If you remove it
successfully, the answer will be 1.

```

**Example 2:**

```
Input:
N = 4
value[] = {1,8,3,4}
X = 0
Output:1
Explanation:The Linked list does not
contains any loop.
```

SOLUTION:

int detectAndRemoveLoop(Node node)
    {
        Node slow = node, fast = node;
        while (slow != null && fast != null
               && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
 
            // If slow and fast meet at same point then loop
            // is present
            if (slow == fast) {
                removeLoop(slow, node);
                return 1;
            }
        }
        return 0;
    }
 
    // Function to remove loop
    void removeLoop(Node loop, Node head)
    {
        Node ptr1 = loop;
        Node ptr2 = loop;
 
        // Count the number of nodes in loop
        int k = 1, i;
        Node prevNode = ptr1;
        while (ptr1.next != ptr2) {
            // keeping track beforeing moving next
            prevNode = ptr1;
            ptr1 = ptr1.next;
            k++;
        }
        prevNode.next = null;
    }

Question 6

Given a linked list and two integers M and N. Traverse the linked list such that you retain M nodes then delete next N nodes, continue the same till end of the linked list.

Difficulty Level: Rookie

**Examples**:

Input:
M = 2, N = 2
Linked List: 1->2->3->4->5->6->7->8
Output:
Linked List: 1->2->5->6

Input:
M = 3, N = 2
Linked List: 1->2->3->4->5->6->7->8->9->10
Output:
Linked List: 1->2->3->6->7->8

Input:
M = 1, N = 1
Linked List: 1->2->3->4->5->6->7->8->9->10
Output:
Linked List: 1->3->5->7->9

SOLUTION:

public static Node deleteNodes(Node head, int M, int N) {
        if (head == null) {
            return null;
        }

        Node current = head;
        int count;

        while (current != null) {
            // Traverse M nodes
            for (count = 1; count < M && current != null; count++) {
                current = current.next;
            }

            if (current == null) {
                return head; // End of linked list reached
            }

            // Delete N nodes
            Node temp = current.next;
            for (count = 1; count <= N && temp != null; count++) {
                temp = temp.next;
            }

            // Update links
            current.next = temp;
            current = temp;
        }

        return head;
    }

Question 7

Given two linked lists, insert nodes of second list into first list at alternate positions of first list.
For example, if first list is 5->7->17->13->11 and second is 12->10->2->4->6, the first list should become 5->12->7->10->17->2->13->4->11->6 and second list should become empty. The nodes of second list should only be inserted when there are positions available. For example, if the first list is 1->2->3 and second list is 4->5->6->7->8, then first list should become 1->4->2->5->3->6 and second list to 7->8.

Use of extra space is not allowed (Not allowed to create additional nodes), i.e., insertion must be done in-place. Expected time complexity is O(n) where n is number of nodes in first list.

SOLUTION:

public static void insertAtAlternatePositions(Node first, Node second) {
        if (first == null || second == null) {
            return;
        }

        Node firstCurrent = first;
        Node secondCurrent = second;
        Node firstNext, secondNext;

        while (firstCurrent != null && secondCurrent != null) {
            // Save the next pointers
            firstNext = firstCurrent.next;
            secondNext = secondCurrent.next;

            // Make the second node the next node of the first node
            firstCurrent.next = secondCurrent;

            // Connect the original next node of the first node
            // to the next node of the second node
            secondCurrent.next = firstNext;

            // Move to the next pair of nodes
            firstCurrent = firstNext;
            secondCurrent = secondNext;
        }

        // Update the second list reference to null
        second = null;
    }

Question 8

Given a singly linked list, find if the linked list is [circular](https://www.geeksforgeeks.org/circular-linked-list/amp/) or not.

> A linked list is called circular if it is not NULL-terminated and all nodes are connected in the form of a cycle. Below is an example of a circular linked list.

SOLUTION:

public boolean hasCycle(ListNode head) 
    {
        if(head == null || head.next == null)
            return false;
        
        ListNode fast = head;
        ListNode slow = head;
        
        while(fast.next != null && fast.next.next != null)
        {
            fast = fast.next.next;
            slow = slow.next;
            
            if(fast == slow)
                return true;
        }
        
        return false;
    }
