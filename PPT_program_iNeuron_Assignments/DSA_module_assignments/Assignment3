Question 1
Given an integer array nums of length n and an integer target, find three integers
in nums such that the sum is closest to the target.
Return the sum of the three integers.

You may assume that each input would have exactly one solution.

Example 1:
Input: nums = [-1,2,1,-4], target = 1
Output: 2

Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

SOLUTION:

public int threeSumClosest(int[] nums, int target) 
    {
        int n = nums.length;
        int closestSum = nums[0] + nums[1] + nums[2];
        int minDiff = Math.abs(closestSum - target);

        Arrays.sort(nums);

        // Fix the first number and use two pointers to find the closest sum
        for (int i = 0; i < n - 2; i++) {
            int left = i + 1;
            int right = n - 1;

            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                int diff = Math.abs(sum - target);

                // Update closestSum and minDiff if the current sum is closer to the target
                if (diff < minDiff) {
                    closestSum = sum;
                    minDiff = diff;
                }

                // Adjust the pointers based on the sum
                if (sum < target) {
                    left++;
                } else {
                    right--;
                }
            }
        }

        return closestSum;
    }


Question 2
Given an array nums of n integers, return an array of all the unique quadruplets
[nums[a], nums[b], nums[c], nums[d]] such that:
           ● 0 <= a, b, c, d < n
           ● a, b, c, and d are distinct.
           ● nums[a] + nums[b] + nums[c] + nums[d] == target

You may return the answer in any order.

Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

SOLUTION:

public List<List<Integer>> fourSum(int[] nums, int target) 
    {
        List<List<Integer>> result = new ArrayList<>();
        
        int size = nums.length;
        
        if(nums == null || size < 4)
            return result;
        
        Arrays.sort(nums);
        
        for(int i=0; i<size -3; i++)
        {
            if(i > 0 && nums[i] == nums[i-1])
                continue;
            
            for(int j=i+1; j<size-2; j++)
            {
                if(j > i+1 && nums[j] == nums[j-1])
                    continue;
                
                int left = j+1;
                int right = size-1;
                
                while(left < right)
                {
                    long sum = (long) nums[i] + nums[j] + nums[left] + nums[right];
                    
                    if(sum == (long)target)
                    {
                        List<Integer> sub_ans = new ArrayList<>();
                        sub_ans.add(nums[i]);
                        sub_ans.add(nums[j]);
                        sub_ans.add(nums[left]);
                        sub_ans.add(nums[right]);
                        
                        result.add(sub_ans); 
                        left++;
                        right--;
                                     
                        while(left < right && nums[left] == nums[left - 1])
                            left++;
                            
                        while(left < right && nums[right] == nums[right + 1])
                            right--;
                    }
                     else if(sum > target)
                           right--;
                      
                     else
                           left++;          
                                     
                }
            }
        }
                 return result;
  }

Question 3
A permutation of an array of integers is an arrangement of its members into a
sequence or linear order.

For example, for arr = [1,2,3], the following are all the permutations of arr:
[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].

The next permutation of an array of integers is the next lexicographically greater
permutation of its integer. More formally, if all the permutations of the array are
sorted in one container according to their lexicographical order, then the next
permutation of that array is the permutation that follows it in the sorted container.

If such an arrangement is not possible, the array must be rearranged as the
lowest possible order (i.e., sorted in ascending order).

● For example, the next permutation of arr = [1,2,3] is [1,3,2].
● Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
● While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not
have a lexicographical larger rearrangement.

Given an array of integers nums, find the next permutation of nums.
The replacement must be in place and use only constant extra memory.

**Example 1:**
Input: nums = [1,2,3]
Output: [1,3,2]

SOLUTION:

public void nextPermutation(int[] nums) {
        if(nums==null || nums.length <= 1)
            return;
        
        int i = nums.length - 2;
        while(i>=0 && nums[i] >= nums[i+1])
            i--;
        
        if(i>=0){
            int j = nums.length - 1;
            while(nums[j] <= nums[i])
                j--;
            
          swap(nums, i, j);  
        }
        
        reverse(nums, i+1, nums.length-1);
    }
    
    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    public void reverse(int[] nums, int i, int j){
        while(i<j)
            swap(nums, i++, j--);
    }

Question 4
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.
Example 1: Input: nums = [1,3,5,6], target = 5
Output: 2

SOLUTION:

public int function(int[] nums, int target)
{
int lower=0,upper = nums.length-1;
while(lower <= upper)
{
int mid = lower + (upper-lower)/2;
if(nums[mid] == target)
return mid;
else if(nums[mid] < target)
lower = mid+1;
else
upper = mid-1;
}
return lower;
}

Question 5
You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits.
Example 1: Input: digits = [1,2,3] Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124. Thus, the result should be [1,2,4].

SOLUTION:

public int[] function(int[] nums)
{
for(int i= nums.length-1; i>=0;i++)
{
if(nums[i] !=9)
{
nums[i]++;
break;
}
else
{nums[i] =0;}
}
if(nums[0]==0)
{
int[] result = new int[nums.length+1];
result[0]=1;
return result;
}
return digits;
}

Question 6
Given a non-empty array of integers nums, every element appears twice except
for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only
constant extra space.

Example 1:
Input: nums = [2,2,1]
Output: 1

SOLUTION:

public int find_single_number(int[] nums)
{
int res =0;
for(int n: nums)
{
result = result ^ n;
}
return result;
}

Question 7
You are given an inclusive range [lower, upper] and a sorted unique integer array
nums, where all elements are within the inclusive range.

A number x is considered missing if x is in the range [lower, upper] and x is not in
nums.

Return the shortest sorted list of ranges that exactly covers all the missing
numbers. That is, no element of nums is included in any of the ranges, and each
missing number is covered by one of the ranges.

Example 1:
Input: nums = [0,1,3,50,75], lower = 0, upper = 99
Output: [[2,2],[4,49],[51,74],[76,99]]

Explanation: The ranges are:
[2,2]
[4,49]
[51,74]
[76,99]

SOLUTION:

public List<String> findMissingRanges(int[] nums, int lower, int upper) {
        List<String> missingRanges = new ArrayList<>();

        Runnable addRange = (int start, int end) -> {
            StringBuilder range = new StringBuilder();
            range.append(start);
            if (end > start) {
                range.append("->");
                range.append(end);
            }
            missingRanges.add(range.toString());
        };

        if (nums.length == 0 || nums[0] > lower) {
            addRange.run(lower, nums.length > 0 ? nums[0] - 1 : upper);
        }

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1] + 1) {
                addRange.run(nums[i - 1] + 1, nums[i] - 1);
            }
        }

        if (nums.length > 0 && nums[nums.length - 1] < upper) {
            addRange.run(nums[nums.length - 1] + 1, upper);
        }

        return missingRanges;
    }

Question 8
Given an array of meeting time intervals where intervals[i] = [starti, endi],
determine if a person could attend all meetings.

Example 1:
Input: intervals = [[0,30],[5,10],[15,20]]
Output: false

SOLUTION:

public boolean func(int[][] intervals)
{
Arrays.sort(intervals,(a,b) -> Integer.compare(a[0],b[0]));
for(int i=0; i<intervals.length;i++)
{
int current_end_time = intervals[i][1];
int next_start_time = intervals[i+1][0];
if(current_end_time >= next_start_time)
return false;
}

return true;
}
