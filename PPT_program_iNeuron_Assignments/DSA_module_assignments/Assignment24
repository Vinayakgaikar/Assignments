Question 1

Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.

```
SymbolValue
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
```

For example, `2` is written as `II` in Roman numeral, just two ones added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:

- `I` can be placed before `V` (5) and `X` (10) to make 4 and 9.
- `X` can be placed before `L` (50) and `C` (100) to make 40 and 90.
- `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer.

**Example 1:**

```
Input: s = "III"
Output: 3
Explanation: III = 3.
```

**Example 2:**

```
Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
```

**Constraints:**

- `1 <= s.length <= 15`
- `s` contains only the characters `('I', 'V', 'X', 'L', 'C', 'D', 'M')`.
- It is **guaranteed** that `s` is a valid roman numeral in the range `[1, 3999]`.

SOLUTION:

public int romanToInt(String s)
    {
        int ans = 0, num = 0;
      for(int i = s.length() - 1; i >= 0; i --) {
        switch(s.charAt(i)) {
          case 'I' : num = 1; break;
          case 'V' : num = 5; break;
          case 'X' : num = 10; break;
          case 'L' : num = 50; break;
          case 'C' : num = 100; break;
          case 'D' : num = 500; break;
          case 'M' : num = 1000; break;
        }
        if(4 * num < ans) ans -= num;
        else ans += num;
      }
      return ans;
    }

Question 2
Longest Substring Without Repeating Characters

Given a string `s`, find the length of the **longest substring** without repeating characters.

**Example 1:**

```
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
```

**Example 2:**

```
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
```

**Example 3:**

```
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
```

**Constraints:**

- `0 <= s.length <= 50000`
- `s` consists of English letters, digits, symbols and spaces.

SOLUTION:

public int lengthOfLongestSubstring(String s) 
    {
        HashMap<Character, Integer> map = new HashMap<>();
        
        int max =0,count=0;
        
        for(int i=0; i<s.length();i++)
        {
            char ch = s.charAt(i);
            
            if(!map.containsKey(ch))
            {
                count++;
                map.put(ch,i);
            }
            else
            {
                i = map.get(ch);
                max = Math.max(count,max);
                count =0;
                map.clear();
            }
        }
        
        return Math.max(count,max);
    }

Question 3

Given an array `nums` of size `n`, return *the majority element*.

The majority element is the element that appears more than `⌊n / 2⌋` times. You may assume that the majority element always exists in the array.

**Example 1:**

```
Input: nums = [3,2,3]
Output: 3
```

**Example 2:**

```
Input: nums = [2,2,1,1,1,2,2]
Output: 2
```

**Constraints:**

- `n == nums.length`
- `1 <= n <= 5 * 10^4`
- `-10^9 <= nums[i] <= 10^9`

SOLUTION:

public int majorityElement(int[] nums) 
    {
        HashMap<Integer,Integer> map = new HashMap<>();
        
        for(int i=0; i<nums.length; i++)
            map.put(nums[i] , map.getOrDefault(nums[i] , 0) + 1);
        
        int ans = 0;
        
        for(int i: map.keySet())
        {
            if(map.get(i) > nums.length /2)
                ans = i;
        }
        return ans;
    }

Question 4

Given an array of strings `strs`, group **the anagrams** together. You can return the answer in **any order**.

An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

**Example 1:**

```
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
```

**Example 2:**

```
Input: strs = [""]
Output: [[""]]
```

**Example 3:**

```
Input: strs = ["a"]
Output: [["a"]]
```

**Constraints:**

- `1 <= strs.length <= 10000`
- `0 <= strs[i].length <= 100`
- `strs[i]` consists of lowercase English letters.

SOLUTION:

public List<List<String>> groupAnagrams(String[] strs) 
    {
        HashMap<String,List<String>> map = new HashMap<>();
        
        for(String st:strs)
        {
            char[] ch = st.toCharArray();
            Arrays.sort(ch);
            String ss = String.valueOf(ch);
            
            if(!map.containsKey(ss))
                map.put(ss,new ArrayList<String>());
            
            map.get(ss).add(st);
        }
        return new ArrayList<>(map.values());
    }

Question 5

An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`.

Given an integer `n`, return *the* `nth` ***ugly number***.

**Example 1:**

```
Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.
```

**Example 2:**

```
Input: n = 1
Output: 1
Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.
```

**Constraints:**

- `1 <= n <= 1690`

SOLUTION:

public int nthUglyNumber(int n) {
        int[] ugly = new int[n];
        ugly[0] = 1;
        int index2 = 0, index3 = 0, index5 = 0;
        int factor2 = 2, factor3 = 3, factor5 = 5;
        for(int i=1;i<n;i++){
            int min = Math.min(Math.min(factor2,factor3),factor5);
            ugly[i] = min;
            if(factor2 == min)
                factor2 = 2*ugly[++index2];
            if(factor3 == min)
                factor3 = 3*ugly[++index3];
            if(factor5 == min)
                factor5 = 5*ugly[++index5];
        }
        return ugly[n-1];
    }

Question 6

Top k most frequent words

Given an array of strings `words` and an integer `k`, return *the* `k` *most frequent strings*.

Return the answer **sorted** by **the frequency** from highest to lowest. Sort the words with the same frequency by their **lexicographical order**.

**Example 1:**

```
Input: words = ["i","love","leetcode","i","love","coding"], k = 2
Output: ["i","love"]
Explanation: "i" and "love" are the two most frequent words.
Note that "i" comes before "love" due to a lower alphabetical order.
```

**Example 2:**

```
Input: words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4
Output: ["the","is","sunny","day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.
```

**Constraints:**

- `1 <= words.length <= 500`
- `1 <= words[i].length <= 10`
- `words[i]` consists of lowercase English letters.
- `k` is in the range `[1, The number of **unique** words[i]]`

SOLUTION:

class Pair{
        String word;
        int freq;
        Pair(String word, int freq){
            this.word=word;
            this.freq=freq;
        }
    }
    
    public List<String> topKFrequent(String[] words, int k) 
    {
        List<String> ans = new ArrayList<>();
        
        if(words == null || k > words.length)
            return ans;
        
        HashMap<String,Integer> map = new HashMap<>();
        
        for(int i=0; i<words.length;i++)
            map.put(words[i] , map.getOrDefault(words[i] ,0) +1);
        
        PriorityQueue<Pair> max_heap = new PriorityQueue<>(new Comparator<Pair>()
        {
            public int compare(Pair a , Pair b)
            {
                if(a.freq == b.freq)
                    return a.word.compareTo(b.word);
                
                else
                    return b.freq-a.freq;
            }
        });
        
        for(Map.Entry<String,Integer> entry : map.entrySet())
            max_heap.add(new Pair(entry.getKey(), entry.getValue()));
        
        for(int i=0; i<k;i++)
        {
            Pair c = max_heap.poll();
            ans.add(c.word);
        }
        return ans;
    }

Question 7

Sliding Window Maximum

You are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position.

Return *the max sliding window*.

**Example 1:**

```
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation:
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6 7         3
 1 [3  -1  -3] 5  3  6 7         3
 1  3 [-1  -3  5] 3  6 7         5
 1  3  -1 [-3  5  3] 6 7         5
 1  3  -1  -3 [5  3  6]7         6
 1  3  -1  -3  5 [3  6  7]       7
```

**Example 2:**

```
Input: nums = [1], k = 1
Output: [1]
```

**Constraints:**

- `1 <= nums.length <= 100000`
- -`10000 <= nums[i] <= 10000`
- `1 <= k <= nums.length`

SOLUTION:

public int[] maxSlidingWindow(int[] nums, int k) 
    {
        int n = nums.length;
        int[] result = new int[n-k+1];
        int start =0,end=0;
        Deque<Integer> deque = new ArrayDeque<>();
        int a=0;
        
        while(end < n)
        {
           while(!deque.isEmpty() && nums[deque.peekLast()] < nums[end])
               deque.pollLast();
            
            deque.offerLast(end);
            
           if(end-start+1 == k)
           {
               result[a++] = nums[deque.peekFirst()];
               start++;
               
               if(deque.peekFirst() < start)
                   deque.pollFirst();
           }
           
           if(end-start+1 < k)
               end++;      
        }
        return result;
    }

Question 8

Find k closest elements

Given a **sorted** integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order.

An integer `a` is closer to `x` than an integer `b` if:

- `|a - x| < |b - x|`, or
- `|a - x| == |b - x|` and `a < b`

**Example 1:**

```
Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]
```

**Example 2:**

```
Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]
```

**Constraints:**

- `1 <= k <= arr.length`
- `1 <= arr.length <= 10000`
- `arr` is sorted in **ascending** order.
- -`10000 <= arr[i], x <= 10000`

SOLUTION:

public List<Integer> findClosestElements(int[] arr, int k, int x) 
    {
        List<Integer> ans = new ArrayList<>();
        
        int start=0,end = arr.length-1;
        
        while(end-start >= k)
        {
            int low = Math.abs(arr[start] -x);
            int high = Math.abs(arr[end] -x);
            
            if(low <= high)
                end--;
            
            else
                start++;
        }
        
        while(start <= end)
            ans.add(arr[start++]);
        
        return ans;
    }
