Question 1

Given an integer `n`, return *`true` if it is a power of two. Otherwise, return `false`*.

An integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`.

**Example 1:**
Input: n = 1 

Output: true

**Example 2:**
Input: n = 16 

Output: true

**Example 3:**
Input: n = 3 

Output: false

SOLUTION:

public boolean isPowerOfTwo(int n) 
    {
        if(n==1)
            return true;
        
        if(n % 2 != 0 || n<=0)
            return false;
        
        else
            return isPowerOfTwo(n/2);
    }

Question 2

Given a number n, find the sum of the first natural numbers.

**Example 1:**

Input: n = 3 

Output: 6

**Example 2:**

Input  : 5 

Output : 15

SOLUTION:

public static int sum(int n)
 {
    if (n == 1)
      return 1;
    else
      return n + sum(n - 1);
  }

Question 3

****Given a positive integer, N. Find the factorial of N. 

**Example 1:**

Input: N = 5 

Output: 120

**Example 2:**

Input: N = 4

Output: 24

SOLUTION:

public int factorial(int n)
{
  if(n ==0 || n == 1)
    return 1;
  else 
    return n*factorial(n-1);
 }

Question 4

Given a number N and a power P, the task is to find the exponent of this number raised to the given power, i.e. N^P.

**Example 1 :** 

Input: N = 5, P = 2

Output: 25

**Example 2 :**
Input: N = 2, P = 5

Output: 32

SOLUTION:

public static double calculateExponent(double base, int power) {
        if (power == 0) {
            return 1;
        } else if (power > 0) {
            return base * calculateExponent(base, power - 1);
        } else {
            return 1 / (base * calculateExponent(base, -power - 1));
        }
    }

Question 5

Given an array of integers **arr**, the task is to find maximum element of that array using recursion.

**Example 1:**

Input: arr = {1, 4, 3, -5, -4, 8, 6};
Output: 8

**Example 2:**

Input: arr = {1, 4, 45, 6, 10, -8};
Output: 45

SOLUTION:

public static int findMax(int[] arr, int index) {
        if (index == arr.length - 1) {
            return arr[index];
        } else {
            int maxFromRest = findMax(arr, index + 1);
            return Math.max(arr[index], maxFromRest);
        }
    }

Question 6

Given first term (a), common difference (d) and a integer N of the Arithmetic Progression series, the task is to find Nth term of the series.

**Example 1:**

Input : a = 2 d = 1 N = 5
Output : 6
The 5th term of the series is : 6

**Example 2:**

Input : a = 5 d = 2 N = 10
Output : 23
The 10th term of the series is : 23

SOLUTION:

 public static int findNthTerm(int a, int d, int N) {
        if (N == 1) {
            return a;
        } else {
            return findNthTerm(a + d, d, N - 1);
        }
    }

Question 7

Given a string S, the task is to write a program to print all permutations of a given string.

**Example 1:**

***Input:***

*S = “ABC”*

***Output:***

*“ABC”, “ACB”, “BAC”, “BCA”, “CBA”, “CAB”*

**Example 2:**

***Input:***

*S = “XY”*

***Output:***

*“XY”, “YX”*

SOLUTION:

 public static void permute(String str, int l, int r) {
        if (l == r) {
            System.out.println(str);
        } else {
            for (int i = l; i <= r; i++) {
                str = swap(str, l, i);
                permute(str, l + 1, r);
                str = swap(str, l, i); // backtrack
            }
        }
    }

    public static String swap(String str, int i, int j) {
        char[] charArray = str.toCharArray();
        char temp = charArray[i];
        charArray[i] = charArray[j];
        charArray[j] = temp;
        return String.valueOf(charArray);
    }

    public static void main(String[] args) {
        String str = "ABC"; // Input string

        int n = str.length();
        permute(str, 0, n - 1);
    }
}

Question 8

Given an array, find a product of all array elements.

**Example 1:**

Input  : arr[] = {1, 2, 3, 4, 5}
Output : 120
**Example 2:**

Input  : arr[] = {1, 6, 3}
Output : 18

SOLUTION:

public static int findProduct(int[] arr, int index) {
        if (index == arr.length - 1) {
            return arr[index];
        } else {
            return arr[index] * findProduct(arr, index + 1);
        }
    }
