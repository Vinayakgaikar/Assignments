Question 1

Given preorder of a binary tree, calculate its **[depth(or height)](https://www.geeksforgeeks.org/write-a-c-program-to-find-the-maximum-depth-or-height-of-a-tree/)** [starting from depth 0]. The preorder is given as a string with two possible characters.

1. ‘l’ denotes the leaf
2. ‘n’ denotes internal node

The given tree can be seen as a full binary tree where every node has 0 or two children. The two children of a node can ‘n’ or ‘l’ or mix of both.

**Examples :**

Input  : nlnll
Output : 2

SOLUTION:

public int maxDepth(TreeNode root) {
        if (root==null)
            return 0;
        
        int leftheight= 1+ maxDepth(root.left);
        int rightheight= 1+ maxDepth(root.right);
        
        return Math.max(leftheight,rightheight);
    }

Question 2

Given a Binary tree, the task is to print the **left view** of the Binary Tree. The left view of a Binary Tree is a set of leftmost nodes for every level.

**Examples:**

***Input:***

            4

          /   \

        5     2

             /   \

            3     1

           /  \

          6    7

***Output:** 4 5 3 6*

SOLUTION:

public List<Integer> leftView(Node root)
    {
       List<Integer> ans = new ArrayList<>();
       
       left_side_view(root , ans , new HashSet<>() , 0);
       return ans;
    }
    
    private void left_side_view(Node root , List<Integer> ans , HashSet<Integer> set , int level)
    {
        if(root == null)
        return;
        
        if(!set.contains(level))
        {
            set.add(level);
            ans.add(root.data);
        }
        
        left_side_view(root.left, ans , set , level+1);
        left_side_view(root.right , ans , set,level+1);
    }
}

Question 3

Given a Binary Tree, print the Right view of it.

The right view of a Binary Tree is a set of nodes visible when the tree is visited from the Right side.

**Examples:**

**Input:**

         1

      /     \

   2         3

/   \       /  \

4     5   6    7

             \

               8

**Output**: 

Right view of the tree is 1 3 7 8

**Input:**

         1

       /

    8

  /

7

**Output**: 

Right view of the tree is 1 8 7

SOLUTION:

public List<Integer> rightSideView(TreeNode root) 
    {
        List <Integer> ans= new List<>();
        rightsideview(root , 1 , new HashSet<>() , ans);
        return ans;
    }
    
    private void rightsideview(TreeNode root , int level , HashSet<Integer> set , List<Integer> ans)
    {
        if(root == null)
            return;
        
        if(!set.contains(level))
        {
            set.add(level);
            ans.add(root.val);
        }
        
        rightsideview(root.right , level+1 , set , ans);
        rightsideview(root.left , level+1 , set , ans);
        
        return;
    }

Question 4

Given a Binary Tree, The task is to print the **bottom view** from left to right. A node **x** is there in output if x is the bottommost node at its horizontal distance. The horizontal distance of the left child of a node x is equal to a horizontal distance of x minus 1, and that of a right child is the horizontal distance of x plus 1.

**Examples:**

**Input:**

             20

           /     \

        8         22

    /      \         \

5         3        25

        /    \

   10       14

**Output:** 5, 10, 3, 14, 25.

**Input:**

             20

           /     \

        8         22

    /      \      /   \

 5         3    4     25

         /    \

     10       14

**Output:**

5 10 4 14 25.

**Explanation:**

If there are multiple bottom-most nodes for a horizontal distance from the root, then print the later one in the level traversal.

**3 and 4** are both the bottom-most nodes at a horizontal distance of 0, we need to print 4.

SOLUTION:

public List <Integer> bottomView(Node root)
    {
        // Code here
        List<Integer> res = new List<>();
        Map<Integer, Integer> map = new TreeMap<>();
        Queue<pair> q = new LinkedList<>();
        
        if(root == null ) return res;
        
        q.offer(new pair(0, root));
        while( !q.isEmpty()){
            pair next = q.remove();
            int column = next.key;
            Node temp = next.node;
            
            map.put(column, temp.data); // either update node value or put new.
            
            if(temp.left != null) q.add(new pair(column-1, temp.left) );
            if(temp.right != null) q.add(new pair(column+1, temp.right) );
        }
        
        for(Map.Entry<Integer, Integer> entry : map.entrySet() ){
            res.add(entry.getValue() );
        }
        
        return res;
    }
}
class pair{
        int key;
        Node node;
        pair(int k, Node n){
            key = k;  node = n;
        }
}
